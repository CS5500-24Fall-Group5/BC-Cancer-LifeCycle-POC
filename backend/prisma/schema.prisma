datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LifecycleStage {
  NEW
  ACTIVE
  AT_RISK
  LAPSED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
  BACKLOG
}

enum TaskType {
  OUTREACH
  FOLLOWUP
  REVIEW
  CAMPAIGN
}

model Donor {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  city           String?
  totalDonations Float
  lastGiftAmount Float
  lastGiftDate   DateTime
  lifecycleStage LifecycleStage
  notes          String?        @db.Text

  // Extended fields
  firstGiftDate           DateTime?
  totalGiftsLastFiscal    Float?
  totalGiftsCurrentFiscal Float?

  // Faux Data Fields for tracking
  excludeFlag               String? // Yes/No
  deceasedFlag              String? // Yes/No
  pmm                       String?
  smm                       String?
  vmm                       String?
  primaryAccount            String? @db.Text
  largestGiftAmount         Float?
  largestGiftAppeal         String?
  firstGiftAmount           Float?
  lastGiftAppeal            String?
  address1                  String?
  address2                  String?
  province                  String?
  postalCode                String?
  contactPhone              String?
  communicationRestrictions String? @db.Text
  snapshotSummary           String? @db.Text

  // Relations
  comments      Comment[]
  actions       DonorAction[]
  assignedTasks TaskAssignment[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lifecycleStage])
  @@index([firstName, lastName, city])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  donor     Donor    @relation(fields: [donorId], references: [id])
  donorId   String
  createdBy String
  createdAt DateTime @default(now())

  @@index([donorId])
}

model DonorAction {
  id            String         @id @default(uuid())
  donor         Donor          @relation(fields: [donorId], references: [id])
  donorId       String
  previousStage LifecycleStage
  newStage      LifecycleStage
  actionType    String // MANUAL_UPDATE, AUTO_UPDATE, etc.
  note          String?        @db.Text
  createdBy     String
  createdAt     DateTime       @default(now())

  @@index([donorId])
}

model Task {
  id             String         @id @default(uuid())
  title          String
  type           TaskType
  description    String         @db.Text
  status         TaskStatus     @default(TODO)
  priority       TaskPriority
  dueDate        DateTime?
  assignedTo     String? // User/coordinator ID
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  targetGroup    LifecycleStage
  affectedDonors Int            @default(0)

  // Relations
  assignments TaskAssignment[]
  comments    TaskComment[]

  @@index([status])
  @@index([targetGroup])
}

model TaskAssignment {
  id        String     @id @default(uuid())
  task      Task       @relation(fields: [taskId], references: [id])
  taskId    String
  donor     Donor      @relation(fields: [donorId], references: [id])
  donorId   String
  status    TaskStatus @default(TODO)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([taskId])
  @@index([donorId])
}

model TaskComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdBy String
  createdAt DateTime @default(now())

  @@index([taskId])
}
